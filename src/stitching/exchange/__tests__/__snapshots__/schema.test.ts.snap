// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`creates an SDL 1`] = `
"# An generic error type for mutations
type EcommerceApplicationError {
  # Code of this error
  code: String!

  # What caused the error
  data: String

  # Type of this error
  type: String!
}

# Autogenerated input type of ApproveOrder
input EcommerceApproveOrderInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
}

# Autogenerated return type of ApproveOrder
type EcommerceApproveOrderPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: EcommerceOrderOrFailureUnion!
}

# Autogenerated input type of CreateOrderWithArtwork
input EcommerceCreateOrderWithArtworkInput {
  # Artwork Id
  artworkId: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # EditionSet Id
  editionSetId: String

  # Number of items in the line item
  quantity: Int
}

# Autogenerated return type of CreateOrderWithArtwork
type EcommerceCreateOrderWithArtworkPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: EcommerceOrderOrFailureUnion!
}

scalar EcommerceDate

scalar EcommerceDateTime

# Autogenerated input type of FulfillAtOnce
input EcommerceFulfillAtOnceInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  fulfillment: EcommerceFulfillmentAttributes!
  id: ID!
}

# Autogenerated return type of FulfillAtOnce
type EcommerceFulfillAtOncePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: EcommerceOrderOrFailureUnion!
}

# A Fulfillment for an order
type EcommerceFulfillment {
  courier: String!
  createdAt: EcommerceDateTime!
  estimatedDelivery: EcommerceDate
  id: ID!
  notes: String
  trackingId: String
  updatedAt: EcommerceDateTime!
}

# Attributes of a Fulfillment
input EcommerceFulfillmentAttributes {
  courier: String!
  estimatedDelivery: EcommerceDate
  notes: String
  trackingId: String
}

# The connection type for Fulfillment.
type EcommerceFulfillmentConnection {
  # A list of edges.
  edges: [EcommerceFulfillmentEdge]

  # A list of nodes.
  nodes: [EcommerceFulfillment]

  # Information to aid in pagination.
  pageInfo: EcommercePageInfo!
}

# An edge in a connection.
type EcommerceFulfillmentEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: EcommerceFulfillment
}

# A Line Item
type EcommerceLineItem {
  artworkId: String!
  createdAt: EcommerceDateTime!
  editionSetId: String
  fulfillments(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): EcommerceFulfillmentConnection
  id: ID!
  priceCents: Int!
  quantity: Int!
  updatedAt: EcommerceDateTime!
}

# The connection type for LineItem.
type EcommerceLineItemConnection {
  # A list of edges.
  edges: [EcommerceLineItemEdge]

  # A list of nodes.
  nodes: [EcommerceLineItem]

  # Information to aid in pagination.
  pageInfo: EcommercePageInfo!
}

# An edge in a connection.
type EcommerceLineItemEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: EcommerceLineItem
}

# An Order
type EcommerceOrder {
  buyer: EcommerceOrderPartyUnion!
  buyerPhoneNumber: String
  buyerTotalCents: Int
  code: String!
  commissionFeeCents: Int
  createdAt: EcommerceDateTime!
  creditCardId: String
  currencyCode: String!
  id: ID!
  itemsTotalCents: Int!
  lastApprovedAt: EcommerceDateTime
  lastSubmittedAt: EcommerceDateTime
  lineItems(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): EcommerceLineItemConnection
  requestedFulfillment: EcommerceRequestedFulfillmentUnion
  seller: EcommerceOrderPartyUnion!
  sellerTotalCents: Int
  shippingTotalCents: Int
  state: EcommerceOrderStateEnum!
  stateExpiresAt: EcommerceDateTime
  stateUpdatedAt: EcommerceDateTime
  taxTotalCents: Int
  transactionFeeCents: Int
  updatedAt: EcommerceDateTime!
}

# Fields to sort by
enum EcommerceOrderConnectionSortEnum {
  # Sort by the timestamp the state of order was last updated in ascending order
  STATE_UPDATED_AT_ASC

  # Sort by the timestamp the state of order was last updated in descending order
  STATE_UPDATED_AT_DESC

  # Sort by the timestamp the order was last updated in ascending order
  UPDATED_AT_ASC

  # Sort by the timestamp the order was last updated in descending order
  UPDATED_AT_DESC
}

# The connection type for Order.
type EcommerceOrderConnectionWithTotalCount {
  # A list of edges.
  edges: [EcommerceOrderEdge]

  # A list of nodes.
  nodes: [EcommerceOrder]

  # Information to aid in pagination.
  pageInfo: EcommercePageInfo!
  totalCount: Int!
}

# An edge in a connection.
type EcommerceOrderEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: EcommerceOrder
}

enum EcommerceOrderFulfillmentTypeEnum {
  # fulfillment type is: pickup
  PICKUP

  # fulfillment type is: ship
  SHIP
}

# Represents either a resolved Order or a potential failure
union EcommerceOrderOrFailureUnion = EcommerceOrderWithMutationFailure | EcommerceOrderWithMutationSuccess

# Represents either a partner or a user
union EcommerceOrderPartyUnion = EcommercePartner | EcommerceUser

enum EcommerceOrderStateEnum {
  # order is abandoned by buyer and never submitted
  ABANDONED

  # order is approved by seller
  APPROVED

  # order is canceled
  CANCELED

  # order is fulfilled by seller
  FULFILLED

  # order is still pending submission by buyer
  PENDING

  # order is submitted by buyer
  SUBMITTED
}

# An error response for changes to an order
type EcommerceOrderWithMutationFailure {
  error: EcommerceApplicationError!
}

# A successfully returned order type
type EcommerceOrderWithMutationSuccess {
  order: EcommerceOrder!
}

# Information about pagination in a connection.
type EcommercePageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

type EcommercePartner {
  id: String!
}

type EcommercePickup {
  fulfillmentType: String!
}

# Autogenerated input type of RejectOrder
input EcommerceRejectOrderInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
}

# Autogenerated return type of RejectOrder
type EcommerceRejectOrderPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: EcommerceOrderOrFailureUnion!
}

# Represents either a shipping information or pickup
union EcommerceRequestedFulfillmentUnion = EcommercePickup | EcommerceShip

# Autogenerated input type of SetPayment
input EcommerceSetPaymentInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  creditCardId: String!
  id: ID!
}

# Autogenerated return type of SetPayment
type EcommerceSetPaymentPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: EcommerceOrderOrFailureUnion!
}

# Autogenerated input type of SetShipping
input EcommerceSetShippingInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  fulfillmentType: EcommerceOrderFulfillmentTypeEnum!
  id: ID!
  shipping: EcommerceShippingAttributes
}

# Autogenerated return type of SetShipping
type EcommerceSetShippingPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: EcommerceOrderOrFailureUnion!
}

type EcommerceShip {
  addressLine1: String
  addressLine2: String
  city: String
  country: String
  name: String
  phoneNumber: String
  postalCode: String
  region: String
}

# Shipping information
input EcommerceShippingAttributes {
  addressLine1: String
  addressLine2: String
  city: String
  country: String
  name: String
  phoneNumber: String!
  postalCode: String
  region: String
}

# Autogenerated input type of SubmitOrder
input EcommerceSubmitOrderInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
}

# Autogenerated return type of SubmitOrder
type EcommerceSubmitOrderPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: EcommerceOrderOrFailureUnion!
}

type EcommerceUser {
  id: String!
}

type Mutation {
  ecommerceApproveOrder(input: EcommerceApproveOrderInput!): EcommerceApproveOrderPayload
  ecommerceCreateOrderWithArtwork(input: EcommerceCreateOrderWithArtworkInput!): EcommerceCreateOrderWithArtworkPayload

  # Fulfill an order with one Fulfillment, it sets this fulfillment to each line item in order
  ecommerceFulfillAtOnce(input: EcommerceFulfillAtOnceInput!): EcommerceFulfillAtOncePayload
  ecommerceRejectOrder(input: EcommerceRejectOrderInput!): EcommerceRejectOrderPayload
  ecommerceSetPayment(input: EcommerceSetPaymentInput!): EcommerceSetPaymentPayload
  ecommerceSetShipping(input: EcommerceSetShippingInput!): EcommerceSetShippingPayload
  ecommerceSubmitOrder(input: EcommerceSubmitOrderInput!): EcommerceSubmitOrderPayload
}

type Query {
  # Find an order by ID
  ecommerceOrder(id: ID!): EcommerceOrder

  # Find list of orders
  ecommerceOrders(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String
    buyerId: String
    buyerType: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    sellerId: String
    sellerType: String
    sort: EcommerceOrderConnectionSortEnum
    state: EcommerceOrderStateEnum
  ): EcommerceOrderConnectionWithTotalCount
}
"
`;
