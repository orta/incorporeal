# Artwork creator
type Artist {
  # Unique ID for this artist
  id: ID!

  # Full name
  name: String!

  # Unique, friendly identifier for this artist
  slug: String!
}

# Artwork or design object
type Artwork {
  # Creators of this work
  artists: [Artist!]!

  # Unique ID for this work
  id: ID!

  # Description of the work's medium
  medium: String

  # Unique, friendly identifier for this work
  slug: String!

  # A title, if any
  title: String
}

type Mutation {
  recordArtworkView(input: RecordArtworkViewInput): RecordArtworkViewPayload
}

# Partner
type Partner {
  artworks: [Artwork]

  # Partners display name
  display_name: String

  # Partners given name
  given_name: String

  # Uniq ID for this partner
  id: ID!
  relative_size: Int

  # Uniq, friendly identifier for this artist
  slug: String!
  subscription_state: String
}

# Query root for this schema
type Query {
  # Find an artist by ID
  artist(id: ID!): Artist

  # Find artists by ID
  artists(ids: [ID]!): [Artist]

  # Find an artwork by ID
  artwork(id: ID!): Artwork

  # Find artworks by ID
  artworks(ids: [ID]!): [Artwork]

  # Autocomplete resolvers.
  match_partners(
    term: String
    page: Int = 1
    size: Int = 5
    match_type: String
  ): [Partner]

  # Find partners by ID
  partners(ids: [ID]!): [Partner]
}

# Autogenerated input type of RecordArtworkView
input RecordArtworkViewInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  artwork_id: String!
}

# Autogenerated return type of RecordArtworkView
type RecordArtworkViewPayload {
  artwork_id: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}
