# An generic error type for mutations
type ApplicationError {
  # Code of this error
  code: String!

  # What caused the error
  data: String

  # Type of this error
  type: String!
}

# Autogenerated input type of ApproveOrder
input ApproveOrderInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
}

# Autogenerated return type of ApproveOrder
type ApproveOrderPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: OrderOrFailureUnion!
}

# Autogenerated input type of CreateOrderWithArtwork
input CreateOrderWithArtworkInput {
  # Artwork Id
  artworkId: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # EditionSet Id
  editionSetId: String

  # Number of items in the line item
  quantity: Int
}

# Autogenerated return type of CreateOrderWithArtwork
type CreateOrderWithArtworkPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: OrderOrFailureUnion!
}

# Date in YYYY-MM-DD format
scalar Date

# An ISO 8601 datetime
scalar DateTime

# Autogenerated input type of FulfillAtOnce
input FulfillAtOnceInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  fulfillment: FulfillmentAttributes!
  id: ID!
}

# Autogenerated return type of FulfillAtOnce
type FulfillAtOncePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: OrderOrFailureUnion!
}

# A Fulfillment for an order
type Fulfillment {
  courier: String!
  createdAt: DateTime!
  estimatedDelivery: Date
  id: ID!
  notes: String
  trackingId: String
  updatedAt: DateTime!
}

# Attributes of a Fulfillment
input FulfillmentAttributes {
  courier: String!
  estimatedDelivery: Date
  notes: String
  trackingId: String
}

# The connection type for Fulfillment.
type FulfillmentConnection {
  # A list of edges.
  edges: [FulfillmentEdge]

  # A list of nodes.
  nodes: [Fulfillment]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type FulfillmentEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Fulfillment
}

# A Line Item
type LineItem {
  artworkId: String!
  createdAt: DateTime!
  editionSetId: String
  fulfillments(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): FulfillmentConnection
  id: ID!
  priceCents: Int!
  quantity: Int!
  updatedAt: DateTime!
}

# The connection type for LineItem.
type LineItemConnection {
  # A list of edges.
  edges: [LineItemEdge]

  # A list of nodes.
  nodes: [LineItem]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type LineItemEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: LineItem
}

type Mutation {
  approveOrder(input: ApproveOrderInput!): ApproveOrderPayload
  createOrderWithArtwork(
    input: CreateOrderWithArtworkInput!
  ): CreateOrderWithArtworkPayload

  # Fulfill an order with one Fulfillment, it sets this fulfillment to each line item in order
  fulfillAtOnce(input: FulfillAtOnceInput!): FulfillAtOncePayload
  rejectOrder(input: RejectOrderInput!): RejectOrderPayload
  setPayment(input: SetPaymentInput!): SetPaymentPayload
  setShipping(input: SetShippingInput!): SetShippingPayload
  submitOrder(input: SubmitOrderInput!): SubmitOrderPayload
}

# An Order
type Order {
  buyer: OrderPartyUnion!
  buyerPhoneNumber: String
  buyerTotalCents: Int
  code: String!
  commissionFeeCents: Int
  createdAt: DateTime!
  creditCardId: String
  currencyCode: String!
  id: ID!
  itemsTotalCents: Int!
  lastApprovedAt: DateTime
  lastSubmittedAt: DateTime
  lineItems(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): LineItemConnection
  requestedFulfillment: RequestedFulfillmentUnion
  seller: OrderPartyUnion!
  sellerTotalCents: Int
  shippingTotalCents: Int
  state: OrderStateEnum!
  stateExpiresAt: DateTime
  stateUpdatedAt: DateTime
  taxTotalCents: Int
  transactionFeeCents: Int
  updatedAt: DateTime!
}

# Fields to sort by
enum OrderConnectionSortEnum {
  # Sort by the timestamp the state of order was last updated in ascending order
  STATE_UPDATED_AT_ASC

  # Sort by the timestamp the state of order was last updated in descending order
  STATE_UPDATED_AT_DESC

  # Sort by the timestamp the order was last updated in ascending order
  UPDATED_AT_ASC

  # Sort by the timestamp the order was last updated in descending order
  UPDATED_AT_DESC
}

# The connection type for Order.
type OrderConnectionWithTotalCount {
  # A list of edges.
  edges: [OrderEdge]

  # A list of nodes.
  nodes: [Order]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int!
}

# An edge in a connection.
type OrderEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Order
}

enum OrderFulfillmentTypeEnum {
  # fulfillment type is: pickup
  PICKUP

  # fulfillment type is: ship
  SHIP
}

# Represents either a resolved Order or a potential failure
union OrderOrFailureUnion = OrderWithMutationFailure | OrderWithMutationSuccess

# Represents either a partner or a user
union OrderPartyUnion = Partner | User

enum OrderStateEnum {
  # order is abandoned by buyer and never submitted
  ABANDONED

  # order is approved by seller
  APPROVED

  # order is canceled
  CANCELED

  # order is fulfilled by seller
  FULFILLED

  # order is still pending submission by buyer
  PENDING

  # order is submitted by buyer
  SUBMITTED
}

# An error response for changes to an order
type OrderWithMutationFailure {
  error: ApplicationError!
}

# A successfully returned order type
type OrderWithMutationSuccess {
  order: Order!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

type Partner {
  id: String!
}

type Pickup {
  fulfillmentType: String!
}

type Query {
  # Find an order by ID
  order(id: ID!): Order

  # Find list of orders
  orders(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String
    buyerId: String
    buyerType: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    sellerId: String
    sellerType: String
    sort: OrderConnectionSortEnum
    state: OrderStateEnum
  ): OrderConnectionWithTotalCount
}

# Autogenerated input type of RejectOrder
input RejectOrderInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
}

# Autogenerated return type of RejectOrder
type RejectOrderPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: OrderOrFailureUnion!
}

# Represents either a shipping information or pickup
union RequestedFulfillmentUnion = Pickup | Ship

# Autogenerated input type of SetPayment
input SetPaymentInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  creditCardId: String!
  id: ID!
}

# Autogenerated return type of SetPayment
type SetPaymentPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: OrderOrFailureUnion!
}

# Autogenerated input type of SetShipping
input SetShippingInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  fulfillmentType: OrderFulfillmentTypeEnum!
  id: ID!
  shipping: ShippingAttributes
}

# Autogenerated return type of SetShipping
type SetShippingPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: OrderOrFailureUnion!
}

type Ship {
  addressLine1: String
  addressLine2: String
  city: String
  country: String
  name: String
  phoneNumber: String
  postalCode: String
  region: String
}

# Shipping information
input ShippingAttributes {
  addressLine1: String
  addressLine2: String
  city: String
  country: String
  name: String
  phoneNumber: String!
  postalCode: String
  region: String
}

# Autogenerated input type of SubmitOrder
input SubmitOrderInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
}

# Autogenerated return type of SubmitOrder
type SubmitOrderPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: OrderOrFailureUnion!
}

type User {
  id: String!
}
