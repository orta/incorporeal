schema {
  query: RootQuery
  mutation: Mutation
}

# An ArtworkGroup which has an artwork and its related line items
type ArtworkGroup {
  artists: [String]
  date: String
  default_image_id: String
  dimensions: Json
  edition_set_id: String
  id: ID!
  images: Json
  line_items: [LineItem]
  price_in_cents: Int!
  title: String
}

# Autogenerated input type of CreateInvoice
input CreateInvoiceInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID
  partner_id: String!
  payment_method: String
  currency: Currencies
  impulse_conversation_id: String
}

enum Currencies {
  # US Dollar
  usd
}

# An Invoice
type Invoice {
  artwork_groups: [ArtworkGroup]
  artwork_groups_count: Int
  created_at: String
  currency: String
  discount_total_cents: Int
  fee_in_cents: Int
  id: ID!
  impulse_conversation_id: Int
  invoice_transactions_count: Int
  line_items: [LineItem]
  line_items_count: Int
  merchant_account: [MerchantAccount]
  merchant_account_id: Int
  paid_at: String
  partner_id: String
  payment_method: String
  refunded_at: String
  sent_at: String
  shipping_total_cents: Int
  state: String
  tax_total_cents: Int
  token: String!
  total_cents: Int
  updated_at: String
  voided_at: String
}

scalar Json

# A LineItem
type LineItem {
  amount_cents: Int!
  description: String!
  id: ID!
  line_item_type: String!
}

# A MerchantAccount
type MerchantAccount {
  # Checks if account is properly configured for credit card payments
  credit_card_enabled: Boolean!
  id: ID!
  partner_id: String!
}

type Mutation {
  create_invoice(input: CreateInvoiceInput!): Invoice
}

# Root query
type RootQuery {
  # Search Invoices
  invoices(ids: [ID], partner_id: String!, token: String): [Invoice]
  # Retrieve a Merchant Account
  partner_product_merchant_account(partner_id: String!): MerchantAccount
}
